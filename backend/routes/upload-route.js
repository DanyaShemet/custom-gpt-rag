import express from 'express'
import multer from 'multer'
import fs from 'fs'
import path from 'path'
import { extractPdfText } from '../utils/pdf.js'
import { uploadToS3 } from '../utils/s3-—Ålient.js'

const router = express.Router()
const upload = multer({ storage: multer.memoryStorage() })

router.post('/upload', upload.single('file'), async (req, res) => {
    try {
        const sessionId = req.body.sessionId
        const file = req.file

        if (!file || !sessionId) {
            return res.status(400).json({ message: '–ù–µ –≤–∫–∞–∑–∞–Ω–æ —Ñ–∞–π–ª –∞–±–æ sessionId' })
        }

        // üü¢ 1. –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –≤ S3
        await uploadToS3({
            fileBuffer: file.buffer,
            fileName: file.originalname,
            sessionId,
            mimeType: file.mimetype
        })

        // üü¢ 2. –û–±—Ä–æ–±–∏—Ç–∏ PDF
        const text = await extractPdfText(file.buffer)
        if (!text.trim()) return res.status(400).json({ message: 'PDF –Ω–µ –º—ñ—Å—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç—É.' })

        const newChunks = text.match(/(.|[\r\n]){1,500}/g) || []
        const filePath = `user_data/user_${sessionId}.json`

        // üß† 3. –Ø–∫—â–æ –≤–∂–µ –±—É–ª–∏ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∏ ‚Äî –æ–± º—î–¥–Ω—É—î–º–æ
        let allChunks = []

        if (fs.existsSync(filePath)) {
            const existing = JSON.parse(fs.readFileSync(filePath, 'utf-8'))
            allChunks = [...existing, ...newChunks]
        } else {
            allChunks = newChunks
        }

        fs.writeFileSync(filePath, JSON.stringify(allChunks, null, 2), 'utf-8')

        res.json({
            message: `–î–æ–¥–∞–Ω–æ ${newChunks.length} —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ñ–≤ –¥–æ –±–∞–∑–∏ –∑–Ω–∞–Ω—å. –ó–∞–≥–∞–ª–æ–º: ${allChunks.length}.`
        })
    } catch (err) {
        console.error('Upload error:', err)
        res.status(500).json({ message: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ PDF.' })
    }
})

export default router
